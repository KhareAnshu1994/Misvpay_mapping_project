using Mapping_Solution.DataAccessLayer.InterfaceDAL;
using Mapping_Solution.Models;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;

namespace Mapping_Solution.DataAccessLayer.DAL
{
    public class DalMfdexMapNewcityArn : IdalMfdexMapNewcityArn
    {
        static string strcon = ConfigurationManager.ConnectionStrings["Oracle"].ToString();
        static string strconTemp = ConfigurationManager.ConnectionStrings["OracleTEMP"].ToString();


        public List<MfdexMapNewcityArnDetail> Get_MfdexMapNewcityArn_AllDetails(MapSearchActivites e)
        {
            List<MfdexMapNewcityArnDetail> obj = new List<MfdexMapNewcityArnDetail>();
            using (OracleConnection objConn = new OracleConnection(CustomHelper.CustomHelper.getConnectionStringForMapping("MISV_TBL_ARN_GROUP_OF_CITIES_TO_RM_MAPPING_RTL", e.ufc_name)))
            {
                OracleCommand cmd = new OracleCommand();
                cmd.Connection = objConn;
                cmd.CommandText = "GETALL_MISV_ARN_GROUP_OF_CITIES_TO_RM_MAPPING_RTL";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new OracleParameter("search_text", e.search_text));
                cmd.Parameters.Add(new OracleParameter("ufcname", e.ufc_name));
                //cmd.Parameters.Add(new OracleParameter("search_text", e.quarter));

                cmd.Parameters.Add("JiN", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                try
                {
                    objConn.Open();
                    OracleDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            MfdexMapNewcityArnDetail dt = new MfdexMapNewcityArnDetail();
                            dt.id = Convert.ToInt32(reader["id"]);
                            dt.arn = reader["arn"] != DBNull.Value ? reader["arn"].ToString() : "";
                            dt.distributor_name = reader["distributor_name"] != DBNull.Value ? reader["distributor_name"].ToString() : "";
                            dt.new_city = reader["new_city"] != DBNull.Value ? reader["new_city"].ToString() : "";
                            dt.rm_code = reader["rm_code"] != DBNull.Value ? reader["rm_code"].ToString() : "";
                            dt.rm_name = reader["rm_name"] != DBNull.Value ? reader["rm_name"].ToString() : "";
                            dt.region_code = reader["region_code"] != DBNull.Value ? reader["region_code"].ToString() : "";
                            dt.region_name = reader["region_name"] != DBNull.Value ? reader["region_name"].ToString() : "";
                            dt.ufc_code = reader["ufc_code"] != DBNull.Value ? reader["ufc_code"].ToString() : "";
                            dt.ufc_name = reader["ufc_name"] != DBNull.Value ? reader["ufc_name"].ToString() : "";
                            dt.zone = reader["zone"] != DBNull.Value ? reader["zone"].ToString() : "";
                            dt.sap_ufc_code = reader["sap_ufc_code"] != DBNull.Value ? reader["sap_ufc_code"].ToString() : "";
                            dt.aaum_equity_perc_share = reader["aaum_equity_perc_share"] != DBNull.Value ? (int)Convert.ToInt64(reader["aaum_equity_perc_share"]) : 0;
                            dt.saaum_hybrid_perc_share = reader["saaum_hybrid_perc_share"] != DBNull.Value ? (int)Convert.ToInt64(reader["saaum_hybrid_perc_share"]) : 0;
                            dt.aaum_arbitrage_perc_share = reader["aaum_arbitrage_perc_share"] != DBNull.Value ? (int)Convert.ToInt64(reader["aaum_arbitrage_perc_share"]) : 0;
                            dt.aaum_fixed_income_perc_share = reader["aaum_fixed_income_perc_share"] != DBNull.Value ? (int)Convert.ToInt64(reader["aaum_fixed_income_perc_share"]) : 0;
                            dt.aaum_cash_perc_share = reader["aaum_cash_perc_share"] != DBNull.Value ? (int)Convert.ToInt64(reader["aaum_cash_perc_share"]) : 0;
                            dt.sap_region_code = reader["sap_region_code"] != DBNull.Value ? reader["sap_region_code"].ToString() : "";
                            dt.sap_zone_code = reader["sap_zone_code"] != DBNull.Value ? reader["sap_zone_code"].ToString() : "";
                            dt.channel_code = reader["channel_code"] != DBNull.Value ? reader["channel_code"].ToString() : "";
                            obj.Add(dt);
                        }
                    }


                    cmd.Dispose();
                    objConn.Close();
                }
                catch (Exception ex)
                {
                    Helper.WriteLog("Dal MfdexMapNewcityArn Data (MfdexMapNewcityArnDetail Model) ERROR :" + ex.Message);
                    throw;
                }
                return obj.OrderBy(x => x.arn).ToList();
            }

        }


        #region Update ARN GROUP OF CITIES TO RM MAPPING RTL
        public Response Update_ARN_GROUP_OF_CITIES_TO_RM_MAPPING_RTL(List<MfdexMapNewcityArnDetail> objList)
        {
            Response res = new Response();
            using (OracleConnection con = new OracleConnection(strconTemp))
            {

                try
                {
                    con.Open();

                    for (int i = 0; i < objList.Count; i++)
                    {
                        OracleCommand cmd = new OracleCommand("UPDATE_MISV_TBL_ARN_GROUP_OF_CITIES_TO_RM_MAPPING_RTL", con);
                        cmd.CommandType = CommandType.StoredProcedure;


                        cmd.Parameters.Add(new OracleParameter("v_id", objList[i].id));
                        cmd.Parameters.Add(new OracleParameter("v_rm_code", objList[i].rm_code));


                        cmd.ExecuteNonQuery();

                        if (cmd.ExecuteNonQuery() < 0)
                        {
                            res.status = true;
                            res.message = "Data Updated Successfully";
                        }
                        else
                        {
                            res.status = false;
                            res.message = "Data not Updated";
                        }

                    }
                }
                catch (Exception ex)
                {
                    res.message = "Error in Update Data " + ex.Message;
                }
                finally
                {
                    con.Close();

                }
            }
            return res;

        }

        #endregion;


        #region Bulk Update Rm Code ARN Group of City to Rm Mapping
        public Response Bulk_Update_ArnGroup_of_City(MfdexMapNewcityArnDetail objModel)
        {
            Response res = new Response();
            using (OracleConnection con = new OracleConnection(strconTemp))
            {

                try
                {
                    con.Open();

                    OracleCommand cmd = new OracleCommand("UPDATE_BULK_RMCODE_MISV_TBL_ARN_GROUP_OF_CITIES_TO_RM_MAPPING_RTL", con);
                    cmd.CommandType = CommandType.StoredProcedure;


                    cmd.Parameters.Add(new OracleParameter("S_rm_code", objModel.New_rmcode));
                    cmd.Parameters.Add(new OracleParameter("p_rm_code", objModel.Old_rmcode));


                    cmd.ExecuteNonQuery();

                    if (cmd.ExecuteNonQuery() < 0)
                    {
                        res.status = true;
                        res.message = "RM Code Replaced Successfully";
                    }
                    else
                    {
                        res.status = false;
                        res.message = "RM Code not Replaced Successfully";
                    }

                }
                catch (Exception ex)
                {
                    res.message = "Error in Update Data " + ex.Message;
                }
                finally
                {
                    con.Close();

                }
            }
            return res;

        }

        #endregion;

    }
}