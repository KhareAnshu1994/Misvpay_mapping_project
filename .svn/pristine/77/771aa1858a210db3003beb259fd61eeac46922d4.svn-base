using Mapping_Solution.DataAccessLayer.InterfaceDAL;
using Mapping_Solution.Models;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;

namespace Mapping_Solution.DataAccessLayer.DAL
{

    public class DalMfdexMapNewcityDirect : IDalMfdexMapNewcityDirect
    {
        static string strcon = ConfigurationManager.ConnectionStrings["Oracle"].ToString();


        public List<MfdexMapNewcityDirectDetails> GetMfdexMapNewcityDirect(MapSearchActivites e)
        {
            List<MfdexMapNewcityDirectDetails> lst = new List<MfdexMapNewcityDirectDetails>();

            using (OracleConnection conn = new OracleConnection(strcon))
            {
                OracleCommand cmd = new OracleCommand();
                cmd.Connection = conn;
                cmd.CommandText = "GetAll_direct_Groupof_cities_to_rmmapping";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new OracleParameter("search_text", e.search_text));
                //cmd.Parameters.Add(new OracleParameter("search_text", e.quarter));

                cmd.Parameters.Add("Get_All_Data", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                try
                {
                    conn.Open();
                    OracleDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        while (rd.Read())
                        {
                            MfdexMapNewcityDirectDetails r = new MfdexMapNewcityDirectDetails();

                            r.arn = rd["arn"] != DBNull.Value ? rd["arn"].ToString() : "";
                            r.new_city = rd["new_city"] != DBNull.Value ? rd["new_city"].ToString() : "";
                            r.rm_code = rd["rm_code"] != DBNull.Value ? rd["rm_code"].ToString() : "";
                            r.rm_name = rd["rm_name"] != DBNull.Value ? rd["rm_name"].ToString() : "";
                            r.region_code = rd["region_code"] != DBNull.Value ? rd["region_code"].ToString() : "";
                            r.region_name = rd["region_name"] != DBNull.Value ? rd["region_name"].ToString() : "";
                            r.ufc_code = rd["ufc_code"] != DBNull.Value ? rd["ufc_code"].ToString() : "";
                            r.ufc_name = rd["ufc_name"] != DBNull.Value ? rd["ufc_name"].ToString() : "";
                            r.sap_ufc_code = rd["sap_ufc_code"] != DBNull.Value ? rd["sap_ufc_code"].ToString() : "";
                            r.aaum_equity_perc_share = rd["aaum_equity_perc_share"] != DBNull.Value ? rd["aaum_equity_perc_share"].ToString() : "";
                            r.saaum_hybrid_perc_share = rd["saaum_hybrid_perc_share"] != DBNull.Value ? rd["saaum_hybrid_perc_share"].ToString() : "";
                            r.aaum_arbitrage_perc_share = rd["aaum_arbitrage_perc_share"] != DBNull.Value ? rd["aaum_arbitrage_perc_share"].ToString() : "";
                            r.aaum_fixed_income_perc_share = rd["aaum_fixed_income_perc_share"] != DBNull.Value ? rd["aaum_fixed_income_perc_share"].ToString() : "";
                            r.aaum_cash_perc_share = rd["aaum_cash_perc_share"] != DBNull.Value ? rd["aaum_cash_perc_share"].ToString() : "";

                            //r.sow_ehs_perc_share = Convert.ToInt32(rd["sow_ehs_perc_share"]);
                            //r.sow_income_perc_share = Convert.ToInt32(rd["sow_income_perc_share"]);
                            //r.sow_lqnmm_perc_share = Convert.ToInt32(rd["sow_lqnmm_perc_share"]);
                            lst.Add(r);
                        }
                    }


                }
                catch (Exception ex)
                {
                    Helper.WriteLog("Dal MfdexMapNewcityDirect Data (MfdexMapNewcityDirectDetails Model) ERROR :" + ex.Message);
                    throw;
                }
                conn.Close();
            }



            return lst;
        }
    }
}